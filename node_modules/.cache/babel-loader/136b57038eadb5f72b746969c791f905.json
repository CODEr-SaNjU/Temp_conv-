{"ast":null,"code":"var _jsxFileName = \"/home/coder-sanju/Desktop/learning_react_redux/temp_change/temp_conv/src/components/Tempinp.js\";\nimport React, { Component } from 'react';\nimport Boil from './boil';\nimport TemperatureInput from './input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class TempInput extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: \" \",\n      scale: 'c'\n    };\n\n    this.handleChange = e => {\n      this.props.onTemperatureChange(e.target.value);\n    };\n\n    this.handleCelsiusChange = temperature => {\n      this.setState({\n        scale: 'c',\n        temperature\n      });\n    };\n\n    this.handleFahrenheitChange = temperature => {\n      this.setState({\n        scale: 'f',\n        temperature\n      });\n    };\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TemperatureInput, {\n        scale: \"c\",\n        temperature: celsius,\n        onTemperatureChange: this.handleCelsiusChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TemperatureInput, {\n        scale: \"c\",\n        temperature: fahrenheit,\n        onTemperatureChange: this.handleFahrenheitChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Boil, {\n        celsius: parseFloat(celsius)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return celsius * 9 / 5 + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n\n  if (Number.isNaN(input)) {\n    return '';\n  }\n\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}","map":{"version":3,"sources":["/home/coder-sanju/Desktop/learning_react_redux/temp_change/temp_conv/src/components/Tempinp.js"],"names":["React","Component","Boil","TemperatureInput","TempInput","state","temperature","scale","handleChange","e","props","onTemperatureChange","target","value","handleCelsiusChange","setState","handleFahrenheitChange","render","celsius","tryConvert","toCelsius","fahrenheit","toFahrenheit","parseFloat","convert","input","Number","isNaN","output","rounded","Math","round","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,gBAAP,MAA6B,SAA7B;;;AAGA,eAAe,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC7CI,KAD6C,GACrC;AACJC,MAAAA,WAAW,EAAE,GADT;AAEJC,MAAAA,KAAK,EAAE;AAFH,KADqC;;AAAA,SAK7CC,YAL6C,GAK9BC,CAAC,IAAI;AAChB,WAAKC,KAAL,CAAWC,mBAAX,CAA+BF,CAAC,CAACG,MAAF,CAASC,KAAxC;AACH,KAP4C;;AAAA,SAQ7CC,mBAR6C,GAQtBR,WAAD,IAAiB;AACnC,WAAKS,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAE,GAAT;AAAcD,QAAAA;AAAd,OAAd;AACH,KAV4C;;AAAA,SAW7CU,sBAX6C,GAWrBV,WAAD,IAAgB;AACvC,WAAKS,QAAL,CAAc;AAACR,QAAAA,KAAK,EAAE,GAAR;AAAaD,QAAAA;AAAb,OAAd;AACC,KAb4C;AAAA;;AAc7CW,EAAAA,MAAM,GAAG;AACL,UAAMV,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAzB;AACA,UAAMD,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAA/B;AACA,UAAMY,OAAO,GAAGX,KAAK,KAAG,GAAR,GAAaY,UAAU,CAACb,WAAD,EAAcc,SAAd,CAAvB,GAAkDd,WAAlE;AACA,UAAMe,UAAU,GAAGd,KAAK,KAAK,GAAV,GAAgBY,UAAU,CAACb,WAAD,EAAcgB,YAAd,CAA1B,GAAwDhB,WAA3E;AACA,wBACI;AAAA,8BACI,QAAC,gBAAD;AAAkB,QAAA,KAAK,EAAC,GAAxB;AAA4B,QAAA,WAAW,EAAEY,OAAzC;AACI,QAAA,mBAAmB,EAAE,KAAKJ;AAD9B;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,gBAAD;AAAkB,QAAA,KAAK,EAAC,GAAxB;AAA4B,QAAA,WAAW,EAAEO,UAAzC;AACI,QAAA,mBAAmB,EAAE,KAAKL;AAD9B;AAAA;AAAA;AAAA;AAAA,cAJJ,eAOI,QAAC,IAAD;AAAM,QAAA,OAAO,EAAEO,UAAU,CAACL,OAAD;AAAzB;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA,oBADJ;AAWH;;AA9B4C;;AAgCjD,SAASE,SAAT,CAAmBC,UAAnB,EAA+B;AAC7B,SAAO,CAACA,UAAU,GAAG,EAAd,IAAoB,CAApB,GAAwB,CAA/B;AACD;;AAED,SAASC,YAAT,CAAsBJ,OAAtB,EAA+B;AAC7B,SAAQA,OAAO,GAAG,CAAV,GAAc,CAAf,GAAoB,EAA3B;AACD;;AAED,SAASC,UAAT,CAAoBb,WAApB,EAAiCkB,OAAjC,EAA0C;AACxC,QAAMC,KAAK,GAAGF,UAAU,CAACjB,WAAD,CAAxB;;AACA,MAAIoB,MAAM,CAACC,KAAP,CAAaF,KAAb,CAAJ,EAAyB;AACvB,WAAO,EAAP;AACD;;AACD,QAAMG,MAAM,GAAGJ,OAAO,CAACC,KAAD,CAAtB;AACA,QAAMI,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,IAApB,IAA4B,IAA5C;AACA,SAAOC,OAAO,CAACG,QAAR,EAAP;AACD","sourcesContent":["import React, { Component } from 'react'\nimport Boil from './boil';\nimport TemperatureInput from './input';\n\n\nexport default class TempInput extends Component {\n    state = {\n        temperature: \" \",\n        scale: 'c'\n    };\n    handleChange = e => {\n        this.props.onTemperatureChange(e.target.value);\n    };\n    handleCelsiusChange = (temperature) => {\n        this.setState({ scale: 'c', temperature });\n    };\n    handleFahrenheitChange=(temperature) =>{\n    this.setState({scale: 'f', temperature});\n    };\n    render() {\n        const scale = this.state.scale\n        const temperature = this.state.temperature;\n        const celsius = scale==='f' ?tryConvert(temperature, toCelsius) : temperature;\n        const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n        return (\n            <>\n                <TemperatureInput scale=\"c\" temperature={celsius}\n                    onTemperatureChange={this.handleCelsiusChange} />\n\n                <TemperatureInput scale=\"c\" temperature={fahrenheit}\n                    onTemperatureChange={this.handleFahrenheitChange} />\n                \n                <Boil celsius={parseFloat(celsius)} />\n            </>\n        )\n    }\n}\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return '';\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}"]},"metadata":{},"sourceType":"module"}